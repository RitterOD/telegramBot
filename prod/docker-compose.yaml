services:
  bot-app:
    image: ritterod/interval_bot:demo_1
    labels:
      - "traefik.http.routers.bot-app.rule=Host(`bot.${HOST}`)"
      - "traefik.http.services.bot-app.loadbalancer.server.port=8080"
      - "traefik.docker.network=bot_app"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${PG_DB}
      SPRING_DATASOURCE_USERNAME: ${PG_USER}
      SPRING_DATASOURCE_PASSWORD: ${PG_PASSWORD}
    depends_on:
      - postgres #
    networks:
      - bot_app

  postgres:
    container_name: postgres_bot
    image: 'postgres:16.3'
    environment:
      - 'POSTGRES_DB=${PG_DB}'
      - 'POSTGRES_USER=${PG_USER}'
      - 'POSTGRES_PASSWORD=${PG_PASSWORD}'
    volumes:
      -  bot_app_postgres:/var/lib/postgresql/data
    networks:
      - bot_app

  pgadmin:
    container_name: pgadmin_bot
    image: dpage/pgadmin4:7.2
    labels:
      - "traefik.http.routers.pgadmin.rule=Host(`${PGADM_SUBDOMAIN}.${HOST}`)"
      - "traefik.http.routers.pgadmin.middlewares=auth"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADM_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADM_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: ${PGADM_CONFIG_SERVER_MODE}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 0.5G
    networks:
      - bot_app

  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus_bot
    labels:
      - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_SUBDOMAIN}.${HOST}`)"
      - "traefik.http.routers.prometheus.middlewares=auth"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.docker.network=bot_app"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - bot_app

  grafana:
    image: grafana/grafana:12.0.2
    container_name: grafana_bot
    labels:
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_SUBDOMAIN}.${HOST}`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.docker.network=bot_app"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
    networks:
      - bot_app
    links:
      - prometheus
    depends_on:
      - prometheus
    volumes:
      - grafana_data_bot:/var/lib/grafana

  traefik:
    image: traefik:v3.5
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=ritterod@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--api.dashboard=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    labels:
      - "traefik.http.routers.api.rule=Host(`${HOST}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_ADMIN_USER}" # Replace with your actual username and hashed password
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
    networks:
      - bot_app
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  bot_app_postgres:
  pgadmin-data:
  grafana_data_bot:

networks:
  bot_app:
    driver: bridge